(*
Make sure you have runes for every single spell on your spell book and run this
in resizable modern.
Change spellbook and rerun it again to complete every book.
*)
{$I SRL-T/osr.simba}

const
  GEN_PATH = {$macro CURRENT_DIRECTORY} + 'generated' + DirectorySeparator;
var
  tabBMP, spellBMP: TMufasaBitmap;
  colors: TIntegerArray;
  color, i: Int32;

  tpa, bg, spellsTPA: TPointArray;
  b: TBox;
  spellsATPA: T2DPointArray;
  spellBook: ERSSpellBook;
  fileName: String;

function GetOffset(book: ERSSpellBook): ERSSpell;
begin
  case book of
    ERSSpellBook.STANDARD: Result := RS_STANDARD_SPELL_FIRST;
    ERSSpellBook.ANCIENT: Result := RS_ANCIENT_SPELL_FIRST;
    ERSSpellBook.LUNAR: Result := RS_LUNAR_SPELL_FIRST;
    ERSSpellBook.ARCEUUS: Result := RS_ARCEUUS_SPELL_FIRST;
  end;
end;

begin
  colors := [
    2700606, 2897472, 2503226, 2963520, 2636360,
    2636096, 2503227
  ];

  if not Magic.Open() then
    Exit;

  spellBook := Magic.GetSpellBook();
  b := GameTab.Bounds();
  b.Y1 += 2;
  b.Y2 -= 20;

  tabBMP.FromClient(b);
  for color in colors do
    if tabBMP.FindColors(tpa, color) then
      bg += tpa;

  tabBMP.DrawTPA(bg, 0);

  spellsTPA := bg.Invert();
  spellsATPA := spellsTPA.Cluster(3,3);

  if not ForceDirectories(GEN_PATH) then
    RaiseException('Couldn''t create the following path: ' + GEN_PATH);
  for i := 0 to High(spellsATPA) do
  begin
    tpa := spellsATPA[i];
    b := tpa.Bounds();
    spellBMP := tabBMP.Copy(b.X1, b.Y1, b.X2, b.Y2);
    fileName := GEN_PATH + ToStr(i + Ord(GetOffset(spellBook))) + '.png';

    spellBMP.SaveToFile(fileName);
  end;

  spellBMP.Free();
  tabBMP.Free();
end.
