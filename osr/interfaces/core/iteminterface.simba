{$DEFINE SRL_ITEM_INTERFACE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSItemInterfaceHandler = record(TSRLBaseRecord)
    SlotBoxesFunction: function (): TBoxArray of object;
    DiscoverOffset: TBox;
  end;

function TRSItemInterfaceHandler.GetSlotBoxes(slots: TIntegerArray): TBoxArray;
var
  boxes: TBoxArray;
  i: Int32;
begin
  if (@Self.SlotBoxesFunction = nil) then
    Self.Fatal('ItemInterface.SlotBoxesFunction = nil');

  boxes := Self.SlotBoxesFunction();
  for i := 0 to High(slots) do
    if InRange(slots[i], 0, High(boxes)) then
      Result += boxes[slots[i]];
end;

function TRSItemInterfaceHandler.GetSlotBox(slot: Int32): TBox;
var
  boxes: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  boxes := Self.SlotBoxesFunction();
  if InRange(slot, 0, High(boxes)) then
    Result := boxes[slot];
end;


function TRSItemInterfaceHandler.RandomSlotNearby(slot: Int32; slots: TIntegerArray): Int32;
var
  i: Int32;
  boxes, tmp: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots.Remove(slot);

  if (Length(Slots) = 0) then
    Self.Fatal('RandomSlotNearby: No slots to choose from');

  boxes := Self.SlotBoxesFunction();

  SetLength(tmp, Length(slots));
  for i := 0 to High(slots) do
    tmp[i] := boxes[slots[i]];

  Result := slots[SRL.RandomBoxNearby(boxes[slot].Middle(), tmp)];
end;

function TRSItemInterfaceHandler.PointToSlot(p: TPoint): Int32;
var
  i: Int32;
  slots: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  for i := 0 to High(slots) do
    if slots[i].Contains(p) then
      Exit(i);

  Result := -1;
end;


function TRSItemInterfaceHandler.GetUsedSlots(): TIntegerArray;
var
  slots: TBoxArray;
  i: Int32;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  for i := 0 to High(slots) do
    if SRL.CountColor(CTS1(1118740, 35), slots[i]) > 0 then
      Result += i;
end;

function TRSItemInterfaceHandler.GetEmptySlots(): TIntegerArray;
var
  slots: TBoxArray;
  i: Int32;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  for i := 0 to High(slots) do
    if SRL.CountColor(CTS1(1118740, 35), slots[i]) = 0 then
      Result += i;
end;


function TRSItemInterfaceHandler.SlotUsed(slot: Int32): Boolean;
var
  slots: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  Result := SRL.CountColor(CTS1(1118740, 35), slots[slot]) > 0;
end;

function TRSItemInterfaceHandler.SlotEmpty(slot: Int32): Boolean;
begin
  Result := not Self.SlotUsed(slot);
end;


function TRSItemInterfaceHandler.GetPixelShift(slot: TBox; waitTime: Int32): Int32;
begin
  Result := SRL.GetPixelShift(slot, waitTime);
end;

function TRSItemInterfaceHandler.DidFade(slot: TBox; waitTime: Int32 = 5): Boolean;
begin
  Result := SRL.GetPixelShift(slot, waitTime) > 0;
end;

function TRSItemInterfaceHandler.WaitFade(slot: Int32; waitTime: Int32 = 200): Boolean;
var
  box: TBox;
begin
  box := Self.GetSlotBox(slot);
  if WaitUntil(Self.DidFade(box), 0, waitTime) then
    Result := WaitUntil(
                (SRL.CountColor(RS_ITEM_BORDER, box) > 0) or
                (SRL.CountColor($FFFFFF, box) > 0), 100, 1000);
end;


function TRSItemInterfaceHandler.IndexOf(items: TRSItemArray): Int32;
var
  Match: TRSItemFinderMatch;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  if ItemFinder.Find(items, Self.SlotBoxesFunction(), Match) then
    Result := Match.Index
  else
    Result := -1;
end;

function TRSItemInterfaceHandler.IndicesOf(items: TRSItemArray): TIntegerArray;
var
  matches: TRSItemFinderMatchArray;
  I: Integer;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction());

  SetLength(Result, Length(matches));
  for I := 0 to High(matches) do
    Result[I] := matches[I].Index;
end;


function TRSItemInterfaceHandler.Find(items: TRSItemArray; out box: TBox): Boolean;
var
  match: TRSItemFinderMatch;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  Result := ItemFinder.Find(items, Self.SlotBoxesFunction(), match);
  if Result then
    Box := match.Box;
end;

function TRSItemInterfaceHandler.FindAll(items: TRSItemArray): TBoxArray;
var
  matches: TRSItemFinderMatchArray;
  I: Integer;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction());

  SetLength(Result, Length(matches));
  for I := 0 to High(matches) do
    Result[I] := matches[I].Box;
end;

function TRSItemInterfaceHandler.FindAll(items: TRSItemArray; out boxes: TBoxArray): Boolean; overload;
var
  matches: TRSItemFinderMatchArray;
  found: TRSItemArray;
  i: Integer;
begin
  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction());
  for i := 0 to High(matches) do
  begin
    if not found.Contains(matches[i].Item) then
      found += matches[i].Item;
    boxes += matches[i].Box;
  end;

  Result := Length(found) = Length(items);
end;

function TRSItemInterfaceHandler.FindAny(items: TRSItemArray): TRSItemFinderMatch;
var
  matches: TRSItemFinderMatchArray;
begin
  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction(), 1);
  if matches <> [] then
    Result := matches[0];
end;

function TRSItemInterfaceHandler.FindAny(items: TRSItemArray; out box: TBox): Boolean; overload;
var
  match: TRSItemFinderMatch;
begin
  match := Self.FindAny(items);
  Result := match <> [];

  if Result then
    box := match.Box;
end;

function TRSItemInterfaceHandler.Contains(item: TRSItem): Boolean;
begin
  Result := Self.IndexOf([Item]) > -1;
end;

function TRSItemInterfaceHandler.ContainsAny(items: TRSItemArray): Boolean;
begin
  Result := Self.IndexOf(items) > -1;
end;

function TRSItemInterfaceHandler.ContainsAll(items: TRSItemArray): Boolean;
var
  matches: TRSItemFinderMatchArray;
  found: TRSItemArray;
  i: Integer;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  matches := ItemFinder.FindAll(items, Self.SlotBoxesFunction());
  for i := 0 to High(matches) do
    if not found.Contains(matches[i].Item) then
      found += matches[i].Item;

  Result := Length(found) = Length(items);
end;


function TRSItemInterfaceHandler.DiscoverAllEx(): array of TRSItemArray;
var
  b: TBox;
  bmp: TMufasaBitmap;
begin
  if (@Self.SlotBoxesFunction = nil) then
    Self.Fatal('ItemInterface.SlotBoxesFunction = nil');

  for b in Self.SlotBoxesFunction() do
  begin
    b.X1 += DiscoverOffset.X1;
    b.Y1 += DiscoverOffset.Y1;
    b.X2 += DiscoverOffset.X2;
    b.Y2 += DiscoverOffset.Y2;

    if (b.Width() <> 36) or (b.Height() <> 23) then
      Self.Fatal('Discover methods box has to be 36x23. You passed w: ' + ToStr(b.Width()) + ' h: ' + ToStr(b.Height()));

    bmp.FromClient(b);
    if ItemFinder.CleanItemBitmap(bmp) then
      Result += ItemFinder.GetHashItems(ItemFinder.GetHash(bmp));
    bmp.Free();
  end;
end;

function TRSItemInterfaceHandler.DiscoverAll(): TRSItemArray;
var
  b: TBox;
  bmp: TMufasaBitmap;
begin
  if (@Self.SlotBoxesFunction = nil) then
    Self.Fatal('ItemInterface.SlotBoxesFunction = nil');

  for b in Self.SlotBoxesFunction() do
  begin
    b.X1 += DiscoverOffset.X1;
    b.Y1 += DiscoverOffset.Y1;
    b.X2 += DiscoverOffset.X2;
    b.Y2 += DiscoverOffset.Y2;

    if (b.Width() <> 36) or (b.Height() <> 23) then
      Self.Fatal('Discover methods box has to be 36x23. You passed w: ' + ToStr(b.Width()) + ' h: ' + ToStr(b.Height()));

    bmp.FromClient(b);
    if ItemFinder.CleanItemBitmap(bmp) then
      Result += ItemFinder.GetHashItems(ItemFinder.GetHash(bmp));
    bmp.Free();
  end;
end;

function TRSItemInterfaceHandler.Discover(slot: Int32): TRSItemArray;
var
  b: TBox;
  bmp: TMufasaBitmap;
begin
  b := Self.GetSlotBox(slot);

  b.X1 += DiscoverOffset.X1;
  b.Y1 += DiscoverOffset.Y1;
  b.X2 += DiscoverOffset.X2;
  b.Y2 += DiscoverOffset.Y2;

  if (b.Width() <> 36) or (b.Height() <> 23) then
    Self.Fatal('Discover methods box has to be 36x23. You passed w: ' + ToStr(b.Width()) + ' h: ' + ToStr(b.Height()));

  bmp.FromClient(b);
  if ItemFinder.CleanItemBitmap(bmp) then
    Result := ItemFinder.GetHashItems(ItemFinder.GetHash(bmp));
  bmp.Free();
end;


function TRSItemInterfaceHandler.FindRandomItems(items: TRSItemArray): TIntegerArray;
var
  usedSlots: TIntegerArray;
begin
  usedSlots := Self.GetUsedSlots();
  Result := usedSlots.Difference(Self.IndicesOf(items));
end;

function TRSItemInterfaceHandler.ContainsRandomItems(items: TRSItemArray): Boolean; overload;
begin
  Result := Self.FindRandomItems(items) <> [];
end;


function TRSItemInterfaceHandler.Count(): Int32;
begin
  Result := Length(Self.GetUsedSlots());
end;

function TRSItemInterfaceHandler.Count(item: TRSItem): Int32; overload;
begin
  Result := Length(Self.IndicesOf([item]));
end;

function TRSItemInterfaceHandler.Count(items: TRSItemArray): Int32; overload;
begin
  Result := Length(Self.IndicesOf(items));
end;

function TRSItemInterfaceHandler.CountEmptySlots(): Int32;
begin
  Result := Length(Self.GetEmptySlots());
end;


function TRSItemInterfaceHandler.CountStack(slot: Int32): Int32;
var
  b: TBox;
begin
  Result := -1;

  b := Self.GetSlotBox(slot);
  b.X1 += Self.DiscoverOffset.X1;
  b.Y1 += Self.DiscoverOffset.Y1 - 9;
  b.X2 := b.X1 + 35;
  b.Y2 := b.Y1 + 8;
  Result := SRL.GetItemAmount(b);
end;

function TRSItemInterfaceHandler.CountStack(item: TRSItem): Int32; overload;
var
  b: TBox;
begin
  Result := -1;

  if Self.Find([item], b) then
  begin
    b.X1 += Self.DiscoverOffset.X1;
    b.Y1 += Self.DiscoverOffset.Y1 - 9;
    b.X2 := b.X1 + 35;
    b.Y2 := b.Y1 + 8;
    Result := SRL.GetItemAmount(b);
  end;
end;


function TRSItemInterfaceHandler.MouseSlot(slot: Int32): Boolean;
var
  slots: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  Result := InRange(slot, 0, High(slots));
  if Result then
    Mouse.Move(slots[slot]);
end;

function TRSItemInterfaceHandler.MouseItem(item: TRSItem): Boolean;
var
  box: TBox;
begin
  Result := Self.Find([item], box);
  if Result then Mouse.Move(box);
end;


function TRSItemInterfaceHandler.ClickSlot(slot: Int32; mouseButton: Int32 = MOUSE_LEFT): Boolean;
begin
  Result := Self.MouseSlot(slot);
  if Result then
    Mouse.Click(mouseButton);
end;

function TRSItemInterfaceHandler.ClickItem(item: TRSItem; mouseButton: Int32 = MOUSE_LEFT): Boolean;
begin
  Result := Self.MouseItem(item);
  if Result then
    Mouse.Click(mouseButton);
end;


function TRSItemInterfaceHandler.Move(slot, destination: Int32): Boolean;
var
  slots: TBoxArray;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  if slot = destination then
    Exit(True);

  slots := Self.SlotBoxesFunction();
  Result := InRange(slot, 0, High(slots)) and InRange(destination, 0, High(slots));

  if Result then
  begin
    Mouse.Move(slots[slot]);
    Mouse.Hold(MOUSE_LEFT);
    Wait(50,100,wdLeft);
    Mouse.Move(slots[destination]);
    Mouse.Release(MOUSE_LEFT);
    Wait(50,100,wdLeft);
  end;
end;

function TRSItemInterfaceHandler.Move(item: TRSItem; destination: Int32): Boolean; overload;
var
  slots: TBoxArray;
  match: TRSItemFinderMatch;
begin
  if (@Self.SlotBoxesFunction = nil) then
    RaiseException(Self.Name + '.SlotBoxesFunction = nil');

  slots := Self.SlotBoxesFunction();
  if ItemFinder.Find([item], slots, match) then
  begin
    if match.Index = destination then
      Exit(True);

    Result := InRange(destination, 0, High(slots));
  end;

  if Result then
  begin
    Mouse.Move(match.Box);
    Mouse.Hold(MOUSE_LEFT);
    Wait(50,100,wdLeft);
    Mouse.Move(slots[destination]);
    Mouse.Release(MOUSE_LEFT);
    Wait(50,100,wdLeft);
  end;
end;


function TRSItemInterfaceHandler.InteractSlot(slot: Int32; option: String = ''): Boolean;
begin
  if not Self.MouseSlot(slot) then
    Exit;

  if option = '' then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;

function TRSItemInterfaceHandler.InteractItem(item: TRSItem; option: String = ''): Boolean;
begin
  if not Self.MouseItem(item) then
    Exit;

  if option = '' then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;


function TRSItemInterfaceHandler.MouseRandomSlot(slots: TIntegerArray): Boolean;
begin
  Result := Self.MouseSlot(slots[SRL.TruncatedGauss(0, High(slots))]);
end;

function TRSItemInterfaceHandler.MouseRandomItem(item: TRSItem): Boolean;
var
  boxes: TBoxArray;
begin
  Result := Self.FindAll([item], boxes);
  if Result then
    Mouse.Move(boxes[SRL.TruncatedGauss(0, High(boxes))]);
end;


function TRSItemInterfaceHandler.ClickRandomSlot(slots: TIntegerArray; mouseButton: Int32 = MOUSE_LEFT): Boolean;
begin
  Result := Self.MouseRandomSlot(slots);
  if Result then
    Mouse.Click(mouseButton);
end;

function TRSItemInterfaceHandler.ClickRandomItem(item: TRSItem; mouseButton: Int32 = MOUSE_LEFT): Boolean;
begin
  Result := Self.MouseRandomItem(item);
  if Result then
    Mouse.Click(mouseButton);
end;


function TRSItemInterfaceHandler.InteractRandomSlot(slots: TIntegerArray; option: String): Boolean;
begin
  Result := Self.MouseRandomSlot(slots) and ChooseOption.Select(option);
end;

function TRSItemInterfaceHandler.InteractRandomItem(item: TRSItem; option: String): Boolean;
begin
  Result := Self.MouseRandomItem(item) and ChooseOption.Select(option);
end;
