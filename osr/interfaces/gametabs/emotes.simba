{$DEFINE WL_EMOTES_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSEmote = (
    YES, NO, BOW, ANGRY, THINK, WAVE, SHRUG, CHEER, BECKON, LAUGH,
    JUMP_FOR_JOY, YAWN, DANCE, JIG, SPIN, HEADBANG, CRY, BLOW_KISS,
    PANIC, RASPBERRY, CLAP, SALUTE
  );

  TRSEmotes = record(TRSInterface)
    Area: TBox;
    Slots: TBoxArray;
  end;

procedure TRSEmotes.Setup(); override;
begin
  inherited;
  Self.Name := 'Emotes2';
end;

function TRSEmotes.GetEmoteUpText(emote: ERSEmote): String;
begin
  case emote of
    YES: Result := 'Yes';
    NO: Result := 'No';
    BOW: Result := 'Bow';
    ANGRY: Result := 'Angry';
    THINK: Result := 'Think';
    WAVE: Result := 'Wave';
    SHRUG: Result := 'Shrug';
    CHEER: Result := 'Cheer';
    BECKON: Result := 'Beckon';
    LAUGH: Result := 'Laugh';
    JUMP_FOR_JOY: Result := 'Jump for Joy';
    YAWN: Result := 'Yawn';
    DANCE: Result := 'Dance';
    JIG: Result := 'Jig';
    SPIN: Result := 'Spin';
    HEADBANG: Result := 'Headbang';
    CRY: Result := 'Cry';
    BLOW_KISS: Result := 'Blow Kiss';
    PANIC: Result := 'Panic';
    RASPBERRY: Result := 'Raspberry';
    CLAP: Result := 'Clap';
    SALUTE: Result := 'Salute';
  else
    Result := '';
  end;
end;


procedure TRSEmotes.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
  i: Int32;
begin
  alignment.Left   := GameTab.Bounds.X1;
  alignment.Right  := GameTab.Bounds.X2 + 5;
  alignment.Top    := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;

  Self.SetupAlignment(alignment);

  Self.ScrollArea := Self.Bounds;
  Self.Area := [Self.Bounds.X1, Self.Bounds.Y1, Self.Bounds.X2-19, Self.Bounds.Y2];
  Self.Slots := Grid(4, 14, 40, 47, [1,2], [Self.Area.X1-1, Self.Area.Y1+7]);

  for i := 0 to High(Self.Slots) do
    Self.Slots[i] := Self.Slots[i].Expand(-5); //shrink boxes because calculating scrolling is not linear.
end;


function TRSEmotes.IsOpen(): Boolean;
begin
  Result := GameTabs.GetCurrentTab() = ERSGameTab.Emotes;
end;

function TRSEmotes.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.Emotes);
end;


function TRSEmotes._GetOffset(): Int32;
begin
  Result := -Round(Self.GetScrollPosition() * 4.3);
end;

function TRSEmotes.GetSlots: TBoxArray;
var
  i: Int32;
begin
  Result := Self.Slots.Offset([0, Self._GetOffset()]);

  for i := High(Result) downto 0 do
  begin
    if Self.Area.Contains([Result[i].X1, Result[i].Y1]) or
       Self.Area.Contains([Result[i].X2, Result[i].Y2]) then
    begin
      Result[i].LimitTo(Self.Area);
      Continue;
    end;

    Delete(Result, i, 1);
  end;
end;


function TRSEmotes.Find(emote: ERSEmote; out bounds: TBox): Boolean;
begin
  bounds := Self.GetSlots[emote];
  Result := Self.Area.Contains([bounds.X1, bounds.Y1]) or
            Self.Area.Contains([bounds.X2, bounds.Y2]);

  if Result then bounds.LimitTo(Self.Area);
end;

function TRSEmotes.Contains(emote: ERSEmote): Boolean;
var
  b: TBox;
begin
  Result := Self.Find(emote, b);
end;

function TRSEmotes.UseEmote(emote: ERSEmote): Boolean;
var
  b: TBox;
  emoteText: String;
  attempts: Int32;
begin
  Result := False;

  if not Self.Open() then
    Exit;

  Self.SetScrollPosition(0);
  Wait(50);

  emoteText := Self.GetEmoteUpText(emote);  // Get the correct uptext for the emote
  if emoteText = '' then
    Exit; // Invalid emote

  attempts := 0;
  while (attempts < 5) and (not Result) do
  begin
    if Self.Find(emote, b) then
    begin
      Mouse.Move(b, True);
      if MainScreen.IsUpText(emoteText) then
      begin
        Mouse.Click(b, MOUSE_LEFT);
        Result := True;
        Exit;
      end;
    end;

    Inc(attempts);
    Wait(RandomRange(150, 300)); // Add a slight delay before retrying
  end;
end;
var
  Emotes: TRSEmotes;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Emotes.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Emotes.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  Emotes.Draw(bitmap);
end;

