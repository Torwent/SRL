(*
# RSClient
Methods relating to targeting the RS client and detecting client states.

if `SRL_DISABLE_REMOTEINPUT` is defined. RemoteInput plugin will not be loaded.
if `SRL_USE_REMOTEINPUT` is defined. RemoteInput will be automatically setup.
if `SRL_USE_REMOTEINPUT_DEBUG` is defined. Debug() calls will drawn on the RS client.
*)

{$DEFINE SRL_RSCLIENT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

{$IFDEF SRL_DISABLE_REMOTEINPUT}
  {$UNDEF SRL_USE_REMOTEINPUT}
{$ELSE}
  {$I remoteinput.simba}
{$ENDIF}

{$SCOPEDENUMS ON}

(*
## ERSClientMode
```pascal
ERSClientMode = (
    UNKNOWN,            // Unable to detect mode (likely not logged in yet)
    FIXED,              // Fixed mode
    RESIZABLE_CLASSIC,  // Resizable with "classic" gametabs or "fixed mode gametabs"
    RESIZABLE_MODERN    // Resizable with gametabs being grouped together at the bottom
  );
```
The modes of the client.
*)
type
  ERSClient = (UNKNOWN, LEGACY, RUNELITE, OFFICIAL);
  ERSClientMode = (UNKNOWN, FIXED, RESIZABLE_CLASSIC, RESIZABLE_MODERN);

  TRSClient = record(TSRLBaseRecord)
    Client: ERSClient;
    Mode: ERSClientMode;

    Bounds: TBox;
    Height, Width: Int32;

    {$IFNDEF SRL_DISABLE_REMOTEINPUT}
    RemoteInput: TRemoteInput;
    DebugOnClient: Boolean;
    {$ENDIF}
  end;

{$H-}
function TRSClient.Image(): TMufasaBitmap;
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if RemoteInput.IsSetup() then
    Exit(RemoteInput.GetImage());
  {$ENDIF}
  
  Self.Fatal('Unable to draw on this client');
end;
{$H+}

(*
## RSClient.DetectClientMode()
```pascal
function TRSClient.DetectClientMode(Update: Boolean): ERSClientMode;
```
Detects the client mode. If **Update** is True ClientModeChanged will be called.
Uses the music tab so will return RS_CLIENT_UNKNOWN when not logged in.
Are there any other cases where music tab won't be visible?
*)
function TRSClient.DetectClientMode(Update: Boolean = False): ERSClientMode;
var
  width, height: Int32;
  pid: UInt32;
  win: TOSWindow;
  proc: TSysProc;
begin
  try
    GetClientDimensions(width, height);
  except
    pid := GetSimbaTargetPID();

    for win in GetWindows() do
      if win.GetPID() = pid then
        Break;

    for proc in {$H-}GetProcesses(){$H+} do
      if proc.PID = pid then
        Break;
    WriteLn('Please refocus the client!');
    TerminateScript(GetExceptionMessage());
  end;

  // Music tab in each mode there are different colors at W-4, H-21
  // Two colors each because tab can be active(red) or not(grey)
  case GetColor(width-4, height-21) of
    2435372, 658467: Result := ERSClientMode.FIXED;
    3555653, 922425: Result := ERSClientMode.RESIZABLE_MODERN;
    2896180, 790059: Result := ERSClientMode.RESIZABLE_CLASSIC;
  end;
  
  if Update then 
  begin
    Self.Mode := Result;
    Self.Width := width;
    Self.Height := height;
    Self.Bounds := Box(0, 0, Max(0, width-1), Max(0, height-1));
  end;
end;

(*
## RSClient.ClientModeChanged()
```pascal
procedure TRSClient.ClientModeChanged();
```
Anything that needs an alert when the client mode changes should override this.
*)
procedure TRSClient.ClientModeChanged();
begin
  Self.DebugLn('Client mode changed: ' + ToString(Self.Mode));
end;

(*
## RSClient.IsLoggedIn()
```pascal
function TRSClient.IsLoggedIn(): Boolean;
function TRSClient.IsLoggedIn(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
```
Returns true/false whether there's a player logged in or not.

Example:
```pascal
WriteLn RSClient.IsLoggedIn();
```
*)
function TRSClient.IsLoggedIn(): Boolean;
var
  clientMode: ERSClientMode;
begin
  clientMode := Self.DetectClientMode();
  if (clientMode <> ERSClientMode.UNKNOWN) and (ClientMode <> Self.Mode) then
  begin
    Self.Mode := clientMode;
    Self.ClientModeChanged();
  end;

  Result := clientMode <> ERSClientMode.UNKNOWN;
end;

function TRSClient.IsLoggedIn(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if interval = -1 then
    interval := SRL.TruncatedGauss(50, 1500);
  Result := WaitUntil(Self.IsLoggedIn(), interval, waitTime);
end;

(*
## RSClient.LoseFocus()
```pascal
procedure TRSClient.LoseFocus();
procedure TRSClient.LoseFocus(delay: Int32);
```
Loses focus if available. Maybe useful for antiban.
You can optionally delay losing focus by passing in a `delay`.
*)
procedure TRSClient.LoseFocus();
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if RemoteInput.IsSetup() then
  begin
    RemoteInput.LoseFocus();
    Exit;
  end;
  {$ENDIF}
  
  Self.DebugLn('Lose focus not yet implemented for this target!');
end;

procedure TRSClient.LoseFocus(delay: Int32); overload;
begin
  Wait(delay);
  Self.LoseFocus();
end;

function TRSClient.GetCurrentClient(): ERSClient;
var
  win: TOSWindow;
begin
  win := GetSimbaTargetWindow();

  case win.GetClassName() of
    'JagRenderView', 'JagWindow': Exit(ERSClient.OFFICIAL);
  end;

  case win.GetRootWindow().GetTitle() of
    'Old School RuneScape': Result := ERSClient.LEGACY;
    'RuneLite': Result := ERSClient.RUNELITE;
  end;
end;

function TRSClient.Revalidate(): Boolean;
var
  pid: PtrUInt;
  wins: TOSWindowArray;
  win: TOSWindow;
  proc: TSysProc;
  b: TBox;
begin
  if IsTargetValid() then Exit(True);

  pid := GetSimbaTargetPID();
  wins := GetWindows().GetByClass('SunAwtCanvas');

  for win in wins do
  begin
    if win.GetPID() <> pid then Continue;

    wins := win.GetRootWindow().GetChildren(True).GetByClass('SunAwtCanvas');
    for win in wins do
      if Length(win.GetChildren(True)) = 0 then
        Break(2);
  end;

  for proc in {$H-}GetProcesses(){$H+} do
  begin
    if proc.PID <> pid then Continue;
    b := win.GetBounds();
    proc.Handle := win;
    proc.Height := b.Height();
    proc.Width := b.Width();

    SetTarget(proc);
    Break;
  end;

  Result := IsTargetValid();
end;

(*
## RSClient.Setup()
```pascal
procedure TRSClient.Setup();
```
RSClient setup method.

```{note}
This is automatically called on the **RSClient** variable.
```
*)
procedure TRSClient.Setup();
begin
  Self.Name := 'RSClient';

  if not Self.Revalidate() then
    TerminateScript('Please refocus the client!');

  {$IFNDEF SIMBAHEADLESS}
  Self.Client := Self.GetCurrentClient();
  {$ENDIF}

  {$IFDEF SRL_USE_REMOTEINPUT}
  Self.RemoteInput.Setup();
  {$ENDIF}

  Self.Mode := Self.DetectClientMode(True);
  if Self.Mode = ERSClientMode.UNKNOWN then
    Self.Mode := ERSClientMode.FIXED; // Fixed as default so we can login if needed
end;

var
  RSClient: TRSClient;

procedure TSRL.Setup(); override;
begin
  inherited;
  RSClient.Setup();
end;
